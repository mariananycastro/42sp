O(1) - constante, sempre na mesmo tempo
    tempo não muda conforme qtd data

O(n) - linear 90 graus
  tempo muda conforme qtd data

O(log n) - começa lento (poucas variaveis) mas diminui tempo - acompanha linear
  tempo muda conforme qtd data, mas diminui com aumento da qtd

O(n elevado a n) - apos um tempo é pior q o linear
  tempo muda conforme qtd data, mas piora muito rapido com aumento da qtd

Complexidade de memoria - qto de memoria eu uso

sa (swap a): Swap the first 2 elements at the top of stack a.
            Do nothing if there is only one or no elements.
sb (swap b): Swap the first 2 elements at the top of stack b.
            Do nothing if there is only one or no elements.
ss : sa and sb at the same time.

pa (push a): Take the first element at the top of b and put it at the top of a.
            Do nothing if b is empty.
pb (push b): Take the first element at the top of a and put it at the top of b.
            Do nothing if a is empty.

ra (rotate a): The first element becomes the last one.
rb (rotate b): The first element becomes the last one.
rr : ra and rb at the same time.

rra (reverse rotate a): The last element becomes the first one.
rrb (reverse rotate b): The last element becomes  the first one.
rrr : rra and rrb at the same time.

  00001100
& 00011001
-----------
  00001000

  00001100
| 00011001
  ________
  00011101 

  00001100
^ 00011001
  ________
  00010101 

~ 00100011 
  ________
  11011100


x =  (1..100).map { |z| z }
File.open("log.txt", "w") { |f| f.write x }

Checks

- com varios numeros negativos
- com zero
- com 100
- com 500
- com letras
- com maior q max int
- com menor q min int
- numeros duplicados
- testar só com pares
- testar só com impar

With 3 numbers <= 3 instructions.
With 5 numbers <= 12 instructions.
With 100 numbers, 
5 < 700
4 < 900
3 < 1100
2 < 1300
1 < 1500
With 500 numbers
5 < 5500
4 < 7000
3 < 8500
2 < 10000
1 < 11500
we need to get at least 6 points to pass.